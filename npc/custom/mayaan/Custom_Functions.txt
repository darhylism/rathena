


function	script	F_Gashapon	{
if (rand(100) < 4) setarray .@i[0],35032,35038,5739,5740;
else if (rand(100) < 8) setarray .@i[0],12884,12885,12886,12887;
else if (rand(100) < 12) setarray .@i[0],5208,18553,5738;
else if (rand(100) < 17) setarray .@i[0],7776,6224,6223,35049,2976;
else if (rand(100) < 28) setarray .@i[0],7776,6224,6223,35049,2976;
else if (rand(100) < 35) setarray .@i[0],12202,12204,12205,12203,12207,12206,12114,12115,12116,12117,12884,12885,12886,12887;
else setarray .@i[0],13698,13697,12221,14175,14587,14519,14517,14518,14520,7619,7620,14545,13758,12214,13582,12210,13607,7621;
set MGitem,.@i[rand(getarraysize(.@i))];
getitem MGitem,1;
announce strcharinfo(0)+" has obtained "+getitemname(MGitem)+" from Antonio Box!",bc_all,0x00FFFF,FW_NORMAL,15;
return;
}

//===== rAthena Script =======================================
//= Yuchinin Common Library
//===== By: ==================================================
//= Yuchinin
//===== Current Version: =====================================
//= 2.4.1
//===== Compatible With: =====================================
//= rAthena Project
//===== Description: =========================================
//= A common useful function I wrote to make my life easier.
//= Most of my release script will need this to work
//=====******** Note ********=================================
//= This will be the core of my other script.
//= Better let it load first before adding my other script.
//===== Additional Comments: =================================
//= 1.0 Initial script.
//= 1.1 Change function arrdel from using 'value' to 'index'
//= 1.2 Fixed sql query bug
//= 1.3 Added Url, npcmes
//= 1.4 Added strcharinfo2 to avoid offline player return empty
//= 	String
//= 1.4a Fixed arrdel
//= 1.4b Fixed arrfind
//= 1.4c Add arrdel, arrfind notsensitive bool
//= 1.5 Add answer_chk to check input value from define value
//= 1.5a Optimize npcindistance
//= 1.5b Try to fix npcindistance
//= 1.6 Added marketshopcountitem, marketshopdelitem
//= 1.7 Added itemcheck, varcheck
//= 1.8 Added itemname
//= 1.9 Revamped itemcheck and varcheck
//= 1.9a Comment out the debugmes of function arradd
//= 2.0 Added running Marquee
//= 2.1 Added function itemtype to return item type in string
//= 2.2 Added getcharid2 to counter getcharid which need attached
//= 2.3 Added arrfind_db and arrget_db
//= 2.3 Added elementname2id and elementid2name
//= 2.3a Added sortstringarray
//= 2.3b Added FAKE_EFFECT npc 
//= 2.4 Added itembreak (Use in Item Hunting Game)
//= 2.4.1 Added explosion (Use in Cannon game)
//============================================================



//=========================================
//= CStr(<"string to change color">,{<"color name">})
//= return string with selected color
//=========================================
function	script	CStr	{
setarray .color_str$,"BLACK","RED","GREEN","BLUE","YELLOW","TEAL","PURPLE","GRAY","WHITE","BROWN","SILVER","GOLD","MITHRIL","NEUTRAL","WATER","EARTH","FIRE","WIND";
setarray .color_code$,"000000","FF0000","04B404","0000FF","FFFF00","00FFFF","FF00FF","C0C0C0","FFFFFF","996600","999999","FFCC00","CCCCCC","777777","0000BB","cc5500","FF0000","7BCC70";
.@color_in$ = getarg(1,"BLACK");
.@str$ = getarg(0,"null");
for(.@x=0; .@x < getarraysize(.color_str$); .@x++){
	if(strtoupper(.@color_in$) == .color_str$[.@x]){
		.@color$ = .color_code$[.@x];
		break;
	}
}
if(.@color$ == "") .@color$ = .color_code$[0];	// default to black if color not found in array
return "^"+.@color$+.@str$+"^000000";
}

//=========================================
//= CZeny(<zeny>,{<"delimiter">,<"symbol">})
//= return ease look zeny string
//=========================================
function	script	CZeny	{
	.@number$  = getarg(0);
	.@delimiter$ = getarg(1,",");
	.@symbol$ = getarg(2,"z");
	.@length   = getstrlen(.@number$);
	.@numberSeparated$ = "";
	if ("" != .@number$ &&  3 < .@length) {
		while (.@length > 3) {
			.@numberSeparated$ = ("" != .@numberSeparated$) ? substr(.@number$, .@length - 3, .@length - 1) + .@delimiter$ + .@numberSeparated$ : substr(.@number$, .@length - 3, .@length - 1);
			.@length = .@length - 3;
		}
		.@numberSeparated$ = substr(.@number$, 0,  .@length - 1) + .@delimiter$ + .@numberSeparated$;
	}
	return ((.@numberSeparated$ != "") ? .@numberSeparated$ : .@number$)+.@symbol$;
}

function	script	findinventoryitem	{
	getinventorylist;
	for(.@x=0;.@x<inventorylist_count;.@x++){
		if(getarg(0)==@inventorylist_id[.@x]) return .@x;
	}
	return -1;
}


//===================================
//=	getcharid2(<mode>,"<charname>")
//= work also on offline character
//= to counter getcharid
//= mode:
//= 0 - Character ID
//= 1 - Party ID
//= 2 - Guild ID
//= 3 - Account ID
//= 4 - Clan ID
//===================================
function	script	getcharid2	{
	.@size = query_sql("select char_id, party_id, guild_id, account_id, clan_id from `char` where name = '"+getarg(1)+"'",.@charid,.@pid,.@gid,.@aid,.@cid);
	if(.@size < 0) return 0;
	if(getarg(0)==0) return .@charid;
	else if(getarg(0)==1) return .@pid;
	else if(getarg(0)==2) return .@gid;
	else if(getarg(0)==3) return .@aid;
	else if(getarg(0)==4) return .@cid;
	return 0;
}

//===================================
//=	strcharinfo2(<mode>,<charid>)
//= work also on offline character
//= to counter strcharinfo
//= mode:
//=	0 = return char name
//=	1 = return party name
//=	2 = return guild name
//===================================
function	script	strcharinfo2	{
	.@size = query_sql("select name, party_id, guild_id from `char` where char_id = "+getarg(1),.@n$,.@p,.@g);
	if(.@size < 0) return "";
	if(getarg(0)==0) return .@n$;
	else if(getarg(0)==1){
		return getpartyname(.@p);
	}else if(getarg(0)==2){
		return getguildname(.@g);
	}
	return "";
}

//===================================
//=	unitwalkauto(<unitid>,<x>,<y>)
//= walk character in npc <distance>
//===================================
function	script	unitwalkauto	{
	@rid = getarg(0,getcharid(3));
	@x = getarg(1);
	@y = getarg(2);
	getmapxy(.@m$,.@x,.@y,0);
	if(!checkcell( .@m$,@x,@y,cell_chkpass )){
		//dispbottom "Coordinate not exists!";
		return;
	}
	@auto_walk = 1;
	viewpoint 1,@x,@y,1,0xFF0000;
	do{
		//dispbottom "auto walking to x = "+@x+" y = "+@y;
		unitwalk @rid,@x,@y,strnpcinfo(3)+"::OnReach";
		sleep2 1500;
	}while(@auto_walk);
	dispbottom "stop auto walking...";
	return;
}

//===================================
//=	walktonpc({<unitid>,<distance>})
//= walk character in npc <distance>
//===================================
function	script	walktonpc	{
	.@rid = getarg(0,getcharid(3));
	.@distance = getarg(1,1);
	getmapxy(.@mc$,.@xc,.@yc,0);
	getmapxy(.@mn$,.@xn,.@yn,1);
	if(.@xc > .@xn) .@xx = .@xn + .@distance;
	else if(.@xc < .@xn) .@xx = .@xn - .@distance;
	else .@xx = .@xn;
	if(.@yc > .@yn) .@yy = .@yn + .@distance;
	else if(.@yc < .@yn) .@yy = .@yn - .@distance;
	else .@yy = .@yn;
	unitwalk .@rid,.@xx,.@yy;
	return;
}

//===================================
//=	npcindistance(<distance>)
//= check if distance with npc smaller or equal to <distance>
//= return to the caller
//= else walk in npc <distance> 
//===================================
function	script	npcindistance	{
	.@distance = getarg(0,1);
	getmapxy(.@mc$,.@xc,.@yc,0);
	getmapxy(.@mn$,.@xn,.@yn,1);
	.@d = distance(.@xc,.@yc,.@xn,.@yn);
	//debugmes "distance = "+.@d;
	while(.@d > .@distance){
		walktonpc(getcharid(3),.@distance);
		sleep2 1000;
		getmapxy(.@mc$,.@xc,.@yc,0);
		getmapxy(.@mn$,.@xn,.@yn,1);
		.@d = distance(.@xc,.@yc,.@xn,.@yn);
	};
	return;
}

function	script	display	{
	.@str$ = getarg(0,"");
	delwaitingroom strnpcinfo(3);
	if(.@str$!="") waitingroom .@str$,0,strnpcinfo(3);
	return;
}


//=========================================
//= getRemain(<sec>,{<langtype>})
//= return remaining time string
//=========================================
function	script	getRemain	{
	.@timeL = getarg(0);
	.@lang = getarg(1,0);
	setarray .@day$," Day "," “ú ";
	setarray .@hour$," Hour "," Žž ";
	setarray .@min$," Min "," •ª ";
	setarray .@sec$," Sec "," •b ";
	if(((((.@timeL)/60)/60)/24)>0){
		return (((((.@timeL)/60)/60)/24)>0?((((.@timeL)/60)/60)/24)+.@day$[.@lang]:"");
	}
	//.@outstr$ = .@outstr$+(((((.@timeL)/60)/60)/24)>0?((((.@timeL)/60)/60)/24)+" Day ":"");
	.@outstr$ = .@outstr$+((((.@timeL)/60)/60)>0?(((.@timeL)/60)/60)+.@hour$[.@lang]:"");
	.@outstr$ = .@outstr$+((((.@timeL)/60)%60)>0?(((.@timeL)/60)%60)+.@min$[.@lang]:"");
	.@outstr$ = .@outstr$+(((.@timeL)%60)>0?((.@timeL)%60)+.@sec$[.@lang]:"");
	return .@outstr$;
}

function	script	showscript2	{
	showscript getarg(0),getcharid(3);
	return;
}


//=========================================
//= Navi(<"name">,<"mapname">{,< x >,< y >})
//= return string with navigation added
//=========================================
function	script	Navi	{
	.@name$ = getarg(0);
	.@map$ = getarg(1);
	.@x = getarg(2,0);
	.@y = getarg(3,0);
	return "<NAVI>"+.@name$+"<INFO>"+.@map$+","+.@x+","+.@y+",0,000,1</INFO></NAVI>";
}

//=========================================
//= Url(<"url">{,<"Url Name">})
//= return url link which open in ingame browser
//=========================================
function	script	Url	{
	return "<URL>"+getarg(1,getarg(0))+"<INFO>"+getarg(0)+",300,300</INFO></URL>";
}


//=========================================
//= itemname(<itemid>)
//= return item string using internal client function
//=========================================
function	script	itemname	{
	.@id = getarg(0);
	return "^nItemID^"+.@id;
}

//=========================================
//= Itemlink(<itemid>)
//= return item string with itemlink added
//=========================================
function	script	Itemlink	{
	.@id = getarg(0);
	.@showslot = getarg(1,0);
	.@slot = getitemslots(.@id);
	return "<ITEM>"+(.@slot&&.@showslot?getitemname(.@id)+"["+.@slot+"]":getitemname(.@id))+"<INFO>"+.@id+"</INFO></ITEM>";
}

function	script	itemtype	{
	.@id = getarg(0);
	setarray .ItemType$,"Healing","","Usable","Etc","Equipment","Weapon","Card","Pet Egg","Pet Equipment","","Ammunition","Consumable","Shadow Equipment","","","","","","Box";
	return .ItemType$[getiteminfo(.@id,2)];
}

function	script	itemcheck	{
	.@iteminfo$ = getarg(0);
	.@mode = getarg(1,0);
	.@mul = getarg(2,1);
	if(.@iteminfo$ == "") return 2;
	explode(.@T$,.@iteminfo$,"|");
	if(!.@mode){
		mes "Item Requirement:";
		.@bool = 1;
		for(.@x=0;.@x<getarraysize(.@T$);.@x++){
			explode(.@TT$,.@T$[.@x],":");
			.@id = atoi(.@TT$[0]);
			.@amt = atoi(.@TT$[1])*.@mul;
			if(countitem(.@id) < .@amt){
				mes " > "+Itemlink(.@id,1)+" ["+CStr(countitem(.@id),"red")+"/"+.@amt+"]";
				.@bool = 0;
			}else{
				mes " > "+Itemlink(.@id,1)+" ["+CStr(countitem(.@id),(countitem(.@id)?"green":"red"))+"/"+(.@amt==0?"-":.@amt)+"]";
				if(countitem(.@id)==0) .@bool = 0;
			}
		}
		return .@bool;
	}else{
		for(.@x=0;.@x<getarraysize(.@T$);.@x++){
			explode(.@TT$,.@T$[.@x],":");
			.@id = atoi(.@TT$[0]);
			.@amt = atoi(.@TT$[1])*.@mul;
			if(.@amt>0) delitem .@id,.@amt;
		}
		return 1;
	}
	return 0;
}

//= Below this will add a new custom inventory system ===============================
//= This system are useful for someone that hope npc can have inventory
//===================================================================================

//=========================================
//= Yuchinin Custom Setup Npc
//=========================================
-	script	Yuchinin_Custom_Setup	-1,{
OnInit:
.install_custom_db = 1;

.@sql$ = "CREATE TABLE IF NOT EXISTS `custom_inventory` (`itemid` int(11) NOT NULL,`amount` int(11) NOT NULL DEFAULT '0',`owner` varchar(25) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8";
.@sql2$ = "CREATE TABLE IF NOT EXISTS `delay_item_db` (`charid` int(10) unsigned NOT NULL,`npcid` varchar(45) NOT NULL,`itemid` int(10) unsigned NOT NULL DEFAULT '0',`amount` int(10) unsigned NOT NULL DEFAULT '0',`timestamp` int(10) unsigned NOT NULL DEFAULT '0') ENGINE=InnoDB DEFAULT CHARSET=utf8;";
if(.install_custom_db){
	query_sql(.@sql$);
	debugmes "table name [ custom_inventory ] installed!";
	query_sql(.@sql2$);
	debugmes "table name [ delay_item_db ] installed!";
}
end;
}

function	script	getdelayitemdata	{
	.@sql$ = "select "+getarg(0)+" from delay_item_db where charid = "+getcharid(0)+" AND npcid = '"+strnpcinfo(3)+"'";
	.@size = query_sql(.@sql$,.@val);
	if(.@size>0) return .@val;
	return -1;
}

function	script	setdelayitemdata	{
	.@sql$ = "update delay_item_db set "+getarg(0)+" = "+getarg(1)+" where charid = "+getcharid(0)+" AND npcid = '"+strnpcinfo(3)+"'";
	//dispbottom .@sql$;
	query_sql(.@sql$);
	return;
}

function	script	adddelayitemdata	{
	.@sql$ = "replace into delay_item_db set charid = "+getcharid(0)+", npcid = '"+strnpcinfo(3)+"'";
	query_sql(.@sql$);
	return;
}

function	script	deldelayitemdata	{
	.@sql$ = "delete from delay_item_db where charid = "+getcharid(0)+" AND npcid = '"+strnpcinfo(3)+"'";
	query_sql(.@sql$);
	return;
}

function	script	countdelayitemdata	{
	.@sql$ = "select timestamp from delay_item_db where npcid = '"+strnpcinfo(3)+"' AND timestamp > "+gettimetick(2);
	.@size = query_sql(.@sql$,.@val);
	if(.@size>0) return .@size;
	return 0;
}

//===================================
//=	invcount("<owner>")
//= return inventory count
//===================================
function	script	invcount	{
	.@owner$ = getarg(0,strnpcinfo(3));
	if(.@owner$=="ALL") query_sql("SELECT COUNT(*) as count FROM custom_inventory",.@count);
	else query_sql("SELECT COUNT(*) as count FROM custom_inventory where owner = '"+.@owner$+"'",.@count);
	return .@count;
}

//===================================
//=	invcountitem(<itemid>,"<owner>")
//= return item count in inventory
//===================================
function	script	invcountitem	{
	.@itemid = getarg(0);
	.@owner$ = getarg(1,strnpcinfo(3));
	if(.@owner$=="ALL") query_sql("SELECT sum as amount FROM custom_inventory where itemid = "+.@itemid,.@amount);
	else query_sql("SELECT amount FROM custom_inventory where itemid = "+.@itemid+" AND owner = '"+.@owner$+"'",.@amount);
	return .@amount;
}

//===================================
//=	invselect("<owner>","<blacklistid>","<label>")
//= add label before selection
//= return itemid after selection
//===================================
function	script	invselect	{
	.@blist$ = "25003";
	.@owner$ = getarg(0,strnpcinfo(3));
	.@blacklist$ = getarg(1,"");
	.@label$ = getarg(2,"");
	if(.@owner$=="ALL") .@sql = query_sql("SELECT itemid,amount,owner FROM custom_inventory",.@itemid,.@amount,.@owner$);
	else .@sql = query_sql("SELECT itemid,amount,owner FROM custom_inventory where instr('"+.@blacklist$+.@blist$+"',itemid) = 0 AND owner = '"+.@owner$+"'",.@itemid,.@amount,.@owner$);
	.@m$ = "";
	for(.@x=0;.@x<.@sql;.@x++){
		.@m$ = .@m$+.@label$+(.@owner$=="ALL"?.@owner$[.@x]+" ":"")+"["+.@amount[.@x]+"]"+getitemname(.@itemid[.@x])+":";
	}
	return .@itemid[select(.@m$)-1];
}

//===================================
//=	invgetitem(<itemid>,"<owner>",{<amount>})
//= return itemid if success
//= return 0 if fail
//===================================
function	script	invgetitem	{
	.@itemid = getarg(0);
	.@owner$ = getarg(1,strnpcinfo(3));
	.@amount = getarg(2,1);
	.@count = callfunc("invcountitem",.@itemid,.@owner$);
	if(getitemname(.@itemid)!="null"){
		if(.@count<=0) query_sql("INSERT INTO `custom_inventory` VALUES ("+.@itemid+","+.@amount+", '"+.@owner$+"')");
		else query_sql("UPDATE `custom_inventory` set amount = amount + "+.@amount+" where itemid = "+.@itemid+" AND owner = '"+.@owner$+"'");
	}else{
		debugmes "invgetitem id "+.@itemid+" is not a valid item";
	}
	.@count2 = callfunc("invcountitem",.@itemid,.@owner$);
	//debugmes "get .@count = "+.@count+" .@count2 = "+.@count2+" owner$ = "+.@owner$;
	if(.@count == .@count2){
		debugmes "invgetitem Fail to get "+.@amount+" x "+getitemname(.@itemid)+" ["+.@owner$+"]";
		return 0;
	}
	return .@itemid;
}

//===================================
//=	invhasitem(<itemid>,"<owner>")
//= return itemid if have item
//= return 0 if don't have item
//===================================
function	script	invhasitem	{
	.@itemid = getarg(0);
	.@owner$ = getarg(1,strnpcinfo(3));
	if(.@owner$=="ALL") .@sql = query_sql("SELECT itemid FROM custom_inventory where itemid = "+.@itemid+";",.@item);
	else .@sql = query_sql("SELECT itemid FROM custom_inventory where owner = '"+.@owner$+"' AND itemid = "+.@itemid+";",.@item);
	if(.@sql>0) return .@itemid;
	return 0;
}

//===================================
//=	invdelitem(<itemid>,"<owner>",{<amount>})
//= return itemid if success
//= return 0 if fail
//===================================
function	script	invdelitem	{
	.@itemid = getarg(0);
	.@owner$ = getarg(1,strnpcinfo(3));
	.@amount = getarg(2,1);
	.@count = callfunc("invcountitem",.@itemid,.@owner$);
	if(getitemname(.@itemid)!="null") {
		query_sql("UPDATE custom_inventory set amount = amount - "+.@amount+" where owner = '"+.@owner$+"' AND itemid = "+.@itemid+";");
		query_sql("DELETE FROM custom_inventory where amount <= 0 AND owner = '"+.@owner$+"' AND itemid = "+.@itemid+";");
	}else{
		debugmes "invdelitem id "+.@itemid+" is not a valid item";
	}
	.@count2 = callfunc("invcountitem",.@itemid,.@owner$);
	//debugmes "del .@count = "+.@count+" .@count2 = "+.@count2+" owner$ = "+.@owner$;
	if(.@count == .@count2){
		debugmes "invdelitem Fail to del "+.@amount+" x "+getitemname(.@itemid)+" ["+.@owner$+"]";
		return 0;
	}
	return .@itemid;
}

//===================================
//=	invclear("<owner>")
//= clear all inventory
//===================================
function	script	invclear	{
	.@owner$ = getarg(0,strnpcinfo(3));
	.@count = callfunc("invcount",.@owner$);
	if(.@owner$=="ALL") query_sql("delete FROM custom_inventory");
	else query_sql("delete FROM custom_inventory where owner = '"+.@owner$+"'");
	.@count2 = callfunc("invcount",.@owner$);
	if(.@count==.@count2){
		return 0;
	}
	return 1;
}
